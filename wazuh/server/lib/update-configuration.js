"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateConfigurationFile = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _logger = require("./logger");

var _getConfiguration = require("./get-configuration");

var _constants = require("../../common/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class UpdateConfigurationFile {
  constructor() {
    _defineProperty(this, "formatValue", value => typeof value === 'string' ? isNaN(Number(value)) ? `'${value}'` : value : typeof value === 'object' ? JSON.stringify(value) : value);

    _defineProperty(this, "formatValueCachedConfiguration", value => typeof value === 'string' ? isNaN(Number(value)) ? value : Number(value) : value);

    this.busy = false;
    this.file = _constants.WAZUH_DATA_CONFIG_APP_PATH;
  }
  /**
   * Add or replace specific setting from wazuh.yml
   * @param {String} key The setting name.
   * @param {String} value New value for the setting.
   * @param {Boolean} exists If true, it just replaces the value for that key.
   */


  updateLine(key, value, exists = false) {
    try {
      const data = _fs.default.readFileSync(this.file, {
        encoding: 'utf-8'
      });

      const re = new RegExp(`^${key}\\s{0,}:\\s{1,}.*`, 'gm');
      const formatedValue = this.formatValue(value);
      const result = exists ? data.replace(re, `${key}: ${formatedValue}`) : `${data}\n${key}: ${formatedValue}`;

      _fs.default.writeFileSync(this.file, result, 'utf8');

      (0, _logger.log)('update-configuration:updateLine', 'Updating line', 'debug');
      return true;
    } catch (error) {
      (0, _logger.log)('update-configuration:updateLine', error.message || error);
      throw error;
    }
  }

  /**
   * Updates wazuh.yml file. If it fails, it throws the error to the next function.
   * @param {Object} input
   */
  updateConfiguration(input) {
    try {
      if (this.busy) {
        throw new Error('Another process is updating the configuration file');
      }

      this.busy = true;
      const configuration = (0, _getConfiguration.getConfiguration)(true) || {};
      const {
        key,
        value
      } = (input || {}).body || {};
      this.updateLine(key, value, typeof configuration[key] !== 'undefined'); // Update the app configuration server-cached setting in memory with the new value

      configuration[key] = this.formatValueCachedConfiguration(value);
      this.busy = false;
      (0, _logger.log)('update-configuration:updateConfiguration', 'Updating configuration', 'debug');
      return {
        needRestart: _constants.WAZUH_CONFIGURATION_SETTINGS_NEED_RESTART.includes(key),
        needReload: _constants.WAZUH_CONFIGURATION_SETTINGS_NEED_RELOAD.includes(key),
        needHealtCheck: _constants.WAZUH_CONFIGURATION_SETTINGS_NEED_HEALTH_CHECK.includes(key)
      };
    } catch (error) {
      (0, _logger.log)('update-configuration:updateConfiguration', error.message || error);
      this.busy = false;
      throw error;
    }
  }

}

exports.UpdateConfigurationFile = UpdateConfigurationFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,