"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = log;

var _winston = _interopRequireDefault(require("winston"));

var _fs = _interopRequireDefault(require("fs"));

var _getConfiguration = require("./get-configuration");

var _constants = require("../../common/constants");

var _filesystem = require("./filesystem");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Wazuh app - Module for logging functions
 * Copyright (C) 2015-2021 Wazuh, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Find more information about this on the LICENSE file.
 */
let allowed = false;
let wazuhlogger = undefined;
let wazuhPlainLogger = undefined;
/**
 * Here we create the loggers
 */

const initLogger = () => {
  const configurationFile = (0, _getConfiguration.getConfiguration)();
  const level = typeof (configurationFile || {})['logs.level'] !== 'undefined' && ['info', 'debug'].includes(configurationFile['logs.level']) ? configurationFile['logs.level'] : 'info'; // JSON logger

  wazuhlogger = _winston.default.createLogger({
    level,
    format: _winston.default.format.json(),
    transports: [new _winston.default.transports.File({
      filename: _constants.WAZUH_DATA_LOGS_RAW_PATH
    })]
  }); // Prevents from exit on error related to the logger.

  wazuhlogger.exitOnError = false; // Plain text logger

  wazuhPlainLogger = _winston.default.createLogger({
    level,
    format: _winston.default.format.simple(),
    transports: [new _winston.default.transports.File({
      filename: _constants.WAZUH_DATA_LOGS_PLAIN_PATH
    })]
  }); // Prevents from exit on error related to the logger.

  wazuhPlainLogger.exitOnError = false;
};
/**
 * Checks if wazuh/logs exists. If it doesn't exist, it will be created.
 */


const initDirectory = async () => {
  try {
    (0, _filesystem.createDataDirectoryIfNotExists)();
    (0, _filesystem.createDataDirectoryIfNotExists)('logs');

    if (typeof wazuhlogger === 'undefined' || typeof wazuhPlainLogger === 'undefined') {
      initLogger();
    }

    allowed = true;
    return;
  } catch (error) {
    allowed = false;
    return Promise.reject(error);
  }
};
/**
 * Returns given file size in MB, if the file doesn't exist returns 0
 * @param {*} filename Path to the file
 */


const getFilesizeInMegaBytes = filename => {
  if (allowed) {
    if (_fs.default.existsSync(filename)) {
      const stats = _fs.default.statSync(filename);

      const fileSizeInMegaBytes = stats.size;
      return fileSizeInMegaBytes / 1000000.0;
    }
  }

  return 0;
};
/**
 * Checks if the wazuhapp.log file size is greater than 100MB, if so it rotates the file.
 */


const checkFiles = () => {
  if (allowed) {
    if (getFilesizeInMegaBytes(_constants.WAZUH_DATA_LOGS_RAW_PATH) >= 100) {
      _fs.default.renameSync(_constants.WAZUH_DATA_LOGS_RAW_PATH, `${_constants.WAZUH_DATA_LOGS_DIRECTORY_PATH}/wazuhapp.${new Date().getTime()}.log`);

      _fs.default.writeFileSync(_constants.WAZUH_DATA_LOGS_RAW_PATH, JSON.stringify({
        date: new Date(),
        level: 'info',
        location: 'logger',
        message: 'Rotated log file'
      }) + '\n');
    }

    if (getFilesizeInMegaBytes(_constants.WAZUH_DATA_LOGS_PLAIN_PATH) >= 100) {
      _fs.default.renameSync(_constants.WAZUH_DATA_LOGS_PLAIN_PATH, `${_constants.WAZUH_DATA_LOGS_DIRECTORY_PATH}/wazuhapp-plain.${new Date().getTime()}.log`);
    }
  }
};

const yyyymmdd = () => {
  const now = new Date();
  const y = now.getFullYear();
  const m = now.getMonth() + 1;
  const d = now.getDate();
  const seconds = now.getSeconds();
  const minutes = now.getMinutes();
  const hour = now.getHours();
  return `${y}/${m < 10 ? '0' : ''}${m}/${d < 10 ? '0' : ''}${d} ${hour}:${minutes}:${seconds}`;
};
/**
 * Main function to add a new log
 * @param {*} location File where the log is being thrown
 * @param {*} message Message to show
 * @param {*} level Optional, default is 'error'
 */


function log(location, message, level) {
  initDirectory().then(() => {
    if (allowed) {
      checkFiles();
      wazuhlogger.log({
        date: new Date(),
        level: level || 'error',
        location: location || 'Unknown origin',
        message: message || 'An error occurred'
      });

      try {
        wazuhPlainLogger.log({
          level: level || 'error',
          message: `${yyyymmdd()}: ${location || 'Unknown origin'}: ${message || 'An error occurred'}`
        });
      } catch (error) {} // eslint-disable-line

    }
  }).catch(error => // eslint-disable-next-line
  console.error(`Cannot create the logs directory due to:\n${error.message || error}`));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,