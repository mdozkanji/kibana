"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaveDocument = void 0;

var _getConfiguration = require("../../lib/get-configuration");

var _logger = require("../../lib/logger");

var _indexDate = require("../../lib/index-date");

var _constants = require("../../../common/constants");

var _tryCatchForIndexPermissionError = require("../tryCatchForIndexPermissionError");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SaveDocument {
  constructor(context) {
    _defineProperty(this, "context", void 0);

    _defineProperty(this, "esClientInternalUser", void 0);

    _defineProperty(this, "logPath", 'cron-scheduler|SaveDocument');

    this.context = context;
    this.esClientInternalUser = context.core.elasticsearch.client.asInternalUser;
  }

  async save(doc, indexConfig) {
    const {
      name,
      creation,
      mapping,
      shards,
      replicas
    } = indexConfig;
    const index = this.addIndexPrefix(name);
    const indexCreation = `${index}-${(0, _indexDate.indexDate)(creation)}`;

    try {
      await this.checkIndexAndCreateIfNotExists(indexCreation, shards, replicas);
      const createDocumentObject = this.createDocument(doc, indexCreation, mapping);
      const response = await this.esClientInternalUser.bulk(createDocumentObject);
      (0, _logger.log)(this.logPath, `Response of create new document ${JSON.stringify(response)}`, 'debug'); // await this.checkIndexPatternAndCreateIfNotExists(index);
    } catch (error) {
      if (error.status === 403) throw {
        error: 403,
        message: `Authorization Exception in the index "${index}"`
      };
      if (error.status === 409) throw {
        error: 409,
        message: `Duplicate index-pattern: ${index}`
      };
      throw error;
    }
  }

  async checkIndexAndCreateIfNotExists(index, shards, replicas) {
    try {
      await (0, _tryCatchForIndexPermissionError.tryCatchForIndexPermissionError)(index)(async () => {
        const exists = await this.esClientInternalUser.indices.exists({
          index
        });
        (0, _logger.log)(this.logPath, `Index '${index}' exists? ${exists.body}`, 'debug');

        if (!exists.body) {
          const response = await this.esClientInternalUser.indices.create({
            index,
            body: {
              settings: {
                index: {
                  number_of_shards: shards || _constants.WAZUH_INDEX_SHARDS,
                  number_of_replicas: replicas || _constants.WAZUH_INDEX_REPLICAS
                }
              }
            }
          });
          (0, _logger.log)(this.logPath, `Status of create a new index: ${JSON.stringify(response)}`, 'debug');
        }
      })();
    } catch (error) {
      (0, _logger.log)(this.logPath, error.message || error);
      this.checkDuplicateIndexError(error);
    }
  }

  checkDuplicateIndexError(error) {
    const {
      type
    } = ((error || {}).body || {}).error || {};
    if (!['resource_already_exists_exception'].includes(type)) throw error;
  }

  createDocument(doc, index, mapping) {
    const createDocumentObject = {
      index,
      type: '_doc',
      body: doc.flatMap(item => [{
        index: {
          _index: index
        }
      }, { ...this.buildData(item, mapping),
        timestamp: new Date(Date.now()).toISOString()
      }])
    };
    (0, _logger.log)(this.logPath, `Document object: ${JSON.stringify(createDocumentObject)}`, 'debug');
    return createDocumentObject;
  }

  buildData(item, mapping) {
    const getItemArray = (array, index) => {
      return JSON.stringify(array[index || 0]);
    };

    const getValue = (key, item) => {
      const keys = key.split('.');

      if (keys.length === 1) {
        if (key.match(/\[.*\]/)) {
          return getItemArray(item[key.replace(/\[.*\]/, '')], key.match(/\[(.*)\]/)[1]);
        }

        return JSON.stringify(item[key]);
      }

      return getValue(keys.slice(1).join('.'), item[keys[0]]);
    };

    if (mapping) {
      let data;
      data = mapping.replace(/\${([a-z|A-Z|0-9|\.\-\_\[.*\]]+)}/gi, (...key) => getValue(key[1], item));
      return JSON.parse(data);
    }

    if (typeof item.data === 'object') {
      return item.data;
    }

    return {
      data: item.data
    };
  }

  addIndexPrefix(index) {
    const configFile = (0, _getConfiguration.getConfiguration)();
    const prefix = configFile['cron.prefix'] || 'wazuh';
    return `${prefix}-${index}`;
  }

}

exports.SaveDocument = SaveDocument;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,